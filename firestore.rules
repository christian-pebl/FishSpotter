
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read videos and users collections
    match /videos/{videoId} {
      allow read: if request.auth != null;
    }
    match /users/{userId} {
      allow read: if request.auth != null;
    }

    // Allow authenticated users to create tags, and read/write their own tags
    match /tags/{tagId} {
      allow create: if request.auth != null;
      allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Admins can read and write anything
    // This is a simplified check. In a real app, you'd have a 'roles' collection.
    match /{document=**} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to upload videos to the 'videos' folder.
    // Limit file size to 100MB and ensure it's a video file.
    match /videos/{allPaths=**} {
      allow write: if request.auth != null
                   && request.resource.size < 100 * 1024 * 1024
                   && request.resource.contentType.matches('video/.*');
    }
    
    // Allow anyone to read video files.
    match /videos/{allPaths=**} {
      allow read;
    }
  }
}
